!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
**Example output**	README.md	/^## **Example output**$/;"	s
**To-do**	README.md	/^## **To-do**$/;"	s
2. Fix removing nodes	README.md	/^  2. Fix removing nodes$/;"	s
CC	Makefile	/^CC=gcc $/;"	m
CFLAGS	Makefile	/^CFLAGS=$(shell pkg-config --cflags glib-2.0)$/;"	m
LDFLAGS	Makefile	/^LDFLAGS=$(shell pkg-config --libs glib-2.0)$/;"	m
Red-Black Trees	README.md	/^# Red-Black Trees$/;"	c
_RBT_H	rbt.h	/^#define _RBT_H$/;"	d
__anon0d38083b0103	main.c	/^  enum {red, black} colour;$/;"	g	struct:node	file:
__anon10459a830103	rbt.h	/^  enum {red, black} colour;$/;"	g	struct:rbt_node
black	main.c	/^  enum {red, black} colour;$/;"	e	enum:node::__anon0d38083b0103	file:
black	rbt.h	/^  enum {red, black} colour;$/;"	e	enum:rbt_node::__anon10459a830103
clean	Makefile	/^clean: $/;"	t
colour	main.c	/^  enum {red, black} colour;$/;"	m	struct:node	typeref:enum:node::__anon0d38083b0103	file:
colour	rbt.h	/^  enum {red, black} colour;$/;"	m	struct:rbt_node	typeref:enum:rbt_node::__anon10459a830103
defaultDotOutFilepath	main.c	/^#define defaultDotOutFilepath /;"	d	file:
defaultErrorSyntax	main.c	/^#define defaultErrorSyntax /;"	d	file:
defaultLineSize	main.c	/^#define defaultLineSize /;"	d	file:
defaultStringBuffer	main.c	/^#define defaultStringBuffer /;"	d	file:
defaultSyntax	main.c	/^#define defaultSyntax /;"	d	file:
edge1	tree.svg	/^<g id="edge1" class="edge">$/;"	i
edge10	tree.svg	/^<g id="edge10" class="edge">$/;"	i
edge11	tree.svg	/^<g id="edge11" class="edge">$/;"	i
edge12	tree.svg	/^<g id="edge12" class="edge">$/;"	i
edge13	tree.svg	/^<g id="edge13" class="edge">$/;"	i
edge14	tree.svg	/^<g id="edge14" class="edge">$/;"	i
edge15	tree.svg	/^<g id="edge15" class="edge">$/;"	i
edge16	tree.svg	/^<g id="edge16" class="edge">$/;"	i
edge2	tree.svg	/^<g id="edge2" class="edge">$/;"	i
edge3	tree.svg	/^<g id="edge3" class="edge">$/;"	i
edge4	tree.svg	/^<g id="edge4" class="edge">$/;"	i
edge5	tree.svg	/^<g id="edge5" class="edge">$/;"	i
edge6	tree.svg	/^<g id="edge6" class="edge">$/;"	i
edge7	tree.svg	/^<g id="edge7" class="edge">$/;"	i
edge8	tree.svg	/^<g id="edge8" class="edge">$/;"	i
edge9	tree.svg	/^<g id="edge9" class="edge">$/;"	i
graph0	tree.svg	/^<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 342)">$/;"	i
le	main.c	/^  struct node *le;$/;"	m	struct:node	typeref:struct:node *	file:
le	rbt.h	/^  struct rbt_node *le;$/;"	m	struct:rbt_node	typeref:struct:rbt_node *
main	Makefile	/^main:	main.o$/;"	t
main	main.c	/^gint main (gint argc, gchar *argv[])$/;"	f	typeref:typename:gint
main.o	Makefile	/^main.o:	main.c$/;"	t
node	main.c	/^typedef struct node {$/;"	s	file:
node1	tree.svg	/^<g id="node1" class="node">$/;"	i
node10	tree.svg	/^<g id="node10" class="node">$/;"	i
node11	tree.svg	/^<g id="node11" class="node">$/;"	i
node12	tree.svg	/^<g id="node12" class="node">$/;"	i
node13	tree.svg	/^<g id="node13" class="node">$/;"	i
node14	tree.svg	/^<g id="node14" class="node">$/;"	i
node15	tree.svg	/^<g id="node15" class="node">$/;"	i
node16	tree.svg	/^<g id="node16" class="node">$/;"	i
node17	tree.svg	/^<g id="node17" class="node">$/;"	i
node2	tree.svg	/^<g id="node2" class="node">$/;"	i
node3	tree.svg	/^<g id="node3" class="node">$/;"	i
node4	tree.svg	/^<g id="node4" class="node">$/;"	i
node5	tree.svg	/^<g id="node5" class="node">$/;"	i
node6	tree.svg	/^<g id="node6" class="node">$/;"	i
node7	tree.svg	/^<g id="node7" class="node">$/;"	i
node8	tree.svg	/^<g id="node8" class="node">$/;"	i
node9	tree.svg	/^<g id="node9" class="node">$/;"	i
node_t	main.c	/^} node_t;$/;"	t	typeref:struct:node	file:
pa	main.c	/^  struct node *pa;$/;"	m	struct:node	typeref:struct:node *	file:
pa	rbt.h	/^  struct rbt_node *pa;$/;"	m	struct:rbt_node	typeref:struct:rbt_node *
rbt_insert	rbt.c	/^rbt_node_t *rbt_insert (rbt_node_t *tree, gpointer *value) {$/;"	f	typeref:typename:rbt_node_t *
rbt_insert_node	rbt.c	/^rbt_node_t *rbt_insert_node (rbt_node_t *tree, rbt_node_t *z, GCompareFunc compare_func) {$/;"	f	typeref:typename:rbt_node_t *
rbt_node	rbt.h	/^typedef struct rbt_node {$/;"	s
rbt_node_t	rbt.h	/^} rbt_node_t;$/;"	t	typeref:struct:rbt_node
red	main.c	/^  enum {red, black} colour;$/;"	e	enum:node::__anon0d38083b0103	file:
red	rbt.h	/^  enum {red, black} colour;$/;"	e	enum:rbt_node::__anon10459a830103
ri	main.c	/^  struct node *ri;$/;"	m	struct:node	typeref:struct:node *	file:
ri	rbt.h	/^  struct rbt_node *ri;$/;"	m	struct:rbt_node	typeref:struct:rbt_node *
root	main.c	/^  struct node *root;$/;"	m	struct:node	typeref:struct:node *	file:
run	Makefile	/^run: main$/;"	t
tree_close	main.c	/^void tree_close (node_t *tree) {$/;"	f	typeref:typename:void
tree_delete	main.c	/^node_t *tree_delete  (node_t *tree, node_t *z) {$/;"	f	typeref:typename:node_t *
tree_delete_fixup	main.c	/^node_t *tree_delete_fixup (node_t *x) {$/;"	f	typeref:typename:node_t *
tree_display	main.c	/^void tree_display (node_t *tree, gint space) {$/;"	f	typeref:typename:void
tree_init	main.c	/^node_t *tree_init (gint value) {$/;"	f	typeref:typename:node_t *
tree_insert	main.c	/^node_t *tree_insert (node_t *tree, gint value) {$/;"	f	typeref:typename:node_t *
tree_insert_node	main.c	/^node_t *tree_insert_node (node_t *tree, node_t *z) {$/;"	f	typeref:typename:node_t *
tree_level	main.c	/^gint tree_level (node_t *tree) {$/;"	f	typeref:typename:gint
tree_minimum	main.c	/^node_t *tree_minimum (node_t *tree) {$/;"	f	typeref:typename:node_t *
tree_node_number	main.c	/^gint tree_node_number (node_t *node) {$/;"	f	typeref:typename:gint
tree_print	main.c	/^void tree_print (node_t *tree, FILE *output) {$/;"	f	typeref:typename:void
tree_print_conn	main.c	/^void tree_print_conn (node_t *tree, FILE *output) {$/;"	f	typeref:typename:void
tree_print_dot	main.c	/^void tree_print_dot (node_t *tree, FILE *output) {$/;"	f	typeref:typename:void
tree_print_node	main.c	/^void tree_print_node (node_t *node) {$/;"	f	typeref:typename:void
tree_print_reds	main.c	/^void tree_print_reds (node_t *tree, FILE *output) {$/;"	f	typeref:typename:void
tree_rotate_le	main.c	/^void tree_rotate_le (node_t *tree, node_t *x) {$/;"	f	typeref:typename:void
tree_rotate_ri	main.c	/^void tree_rotate_ri (node_t *tree, node_t *x) {$/;"	f	typeref:typename:void
tree_search	main.c	/^node_t *tree_search (node_t *tree, gint value) {$/;"	f	typeref:typename:node_t *
tree_transplant	main.c	/^node_t *tree_transplant (node_t *tree, node_t *u, node_t *v) {$/;"	f	typeref:typename:node_t *
val	main.c	/^  gint val;$/;"	m	struct:node	typeref:typename:gint	file:
value	rbt.h	/^  gpointer *value;$/;"	m	struct:rbt_node	typeref:typename:gpointer *
